'use client'

import GalleryImage from '../components/GalleryImage'
import { useState, useEffect } from 'react'
import { getCookie } from '../utils/cookies';


// Add type definition
interface GalleryImage {
    id: number;
    image_url: string;
    title: string | null;
    username: string | null;
    width: number;
    height: number;
}

// Add new ImageSkeleton component at the top level of the file
const ImageSkeleton = ({ deviceType }: { deviceType: 'desktop' | 'mobile' }) => (
    <div className={`w-full ${deviceType === 'desktop' ? 'aspect-[16/9]' : 'aspect-[9/16]'} bg-gray-800 rounded-xl overflow-hidden animate-pulse`}>
        <div className="w-full h-full bg-gray-700"></div>
        <div className="p-4 space-y-2">
            <div className="h-4 bg-gray-700 rounded w-3/4"></div>
            <div className="h-4 bg-gray-700 rounded w-1/2"></div>
        </div>
    </div>
);

export default function Gallery() {
    // Update state to use the type
    const [images, setImages] = useState<GalleryImage[]>([]);
    const [currentPage, setCurrentPage] = useState(1);
    const [totalPages, setTotalPages] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const [selectedDevice, setSelectedDevice] = useState<'desktop' | 'mobile'>('desktop');

    // Add dimensions mapping
    const deviceDimensions = {
        desktop: { width: 1792, height: 1024 },
        mobile: { width: 1024, height: 1792 }
    };

    // Add function to fetch images from backend
    const fetchImages = async (page: number) => {
        try {
            setIsLoading(true);
            const { width, height } = deviceDimensions[selectedDevice];

            // Reduce artificial delay to 0.2 seconds
            // await new Promise(resolve => setTimeout(resolve, 200));

            const response = await fetch(
                `${process.env.NEXT_PUBLIC_BACKEND_API_URL}/mood/mood-wallpapers-public/?page=${page}&width=${width}&height=${height}`,
                {
                    method: 'GET',
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': getCookie('csrftoken') || '',
                        'Cookie': `sessionid=${getCookie('sessionid')}; csrftoken=${getCookie('csrftoken')}`
                    },
                }
            );
            const data = await response.json();
            console.log(data)
            setImages(data.results);
            setTotalPages(Math.ceil(data.count / 9));
            setIsLoading(false);
        } catch (error) {
            console.error('Error fetching images:', error);
            setIsLoading(false);
        }
    };

    // Fetch images when page or device changes
    useEffect(() => {
        fetchImages(currentPage);
    }, [currentPage, selectedDevice]);

    // Add device selection state

    // Add pagination controls component
    const Pagination = () => (
        <div className="flex justify-center sm:gap-2 mt-8">
            <button
                type="button"
                onClick={(e) => {
                    e.preventDefault();
                    setCurrentPage(prev => Math.max(prev - 1, 1));
                }}
                disabled={currentPage === 1}
                className="px-4 py-2 text-sm text-base text-white bg-accent rounded-xl disabled:bg-gray-400 hover:scale-110  transition-transform duration-200"
            >
                Previous
            </button>
            <span className="px-2 sm:px-4 py-1 sm:py-2 text-sm sm:text-base text-white">
                Page {currentPage} of {totalPages}
            </span>
            <button
                type="button"
                onClick={(e) => {
                    e.preventDefault();
                    setCurrentPage(prev => Math.min(prev + 1, totalPages));
                }}
                disabled={currentPage === totalPages}
                className="px-4 py-2 text-sm text-base text-white bg-accent rounded-xl disabled:bg-gray-400 hover:scale-110  transition-transform duration-200"
            >
                Next
            </button>
        </div>
    );

    return (
        <div className="container mx-auto mt-20 mb-[50px]">
            <div className="text-white">
                <h1 className="text-4xl font-bold mb-10">Wallpapers generated by our users</h1>

                {/* Add device selection buttons */}
                <div className="flex gap-4 mb-6">
                    <button
                        type="button"
                        onClick={(e) => {
                            e.preventDefault();
                            setCurrentPage(1);
                            setSelectedDevice('desktop');
                        }}
                        className={`flex items-center gap-2 px-4 py-2 rounded-xl transition-all duration-200 ${selectedDevice === 'desktop' ? 'bg-accent text-white' : 'bg-transparent text-white/60'
                            }`}
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                            <path strokeLinecap="round" strokeLinejoin="round" d="M9 17.25v1.007a3 3 0 0 1-.879 2.122L7.5 21h9l-.621-.621A3 3 0 0 1 15 18.257V17.25m6-12V15a2.25 2.25 0 0 1-2.25 2.25H5.25A2.25 2.25 0 0 1 3 15V5.25m18 0A2.25 2.25 0 0 0 18.75 3H5.25A2.25 2.25 0 0 0 3 5.25m18 0V12a2.25 2.25 0 0 1-2.25 2.25H5.25A2.25 2.25 0 0 1 3 12V5.25" />
                        </svg>
                        Desktop
                    </button>
                    <button
                        type="button"
                        onClick={(e) => {
                            e.preventDefault();
                            setCurrentPage(1);
                            setSelectedDevice('mobile');
                        }}
                        className={`flex items-center gap-2 px-4 py-2 rounded-xl transition-all duration-200 ${selectedDevice === 'mobile' ? 'bg-accent text-white' : 'bg-transparent text-white/60'
                            }`}
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                            <path strokeLinecap="round" strokeLinejoin="round" d="M10.5 1.5H8.25A2.25 2.25 0 0 0 6 3.75v16.5a2.25 2.25 0 0 0 2.25 2.25h7.5A2.25 2.25 0 0 0 18 20.25V3.75a2.25 2.25 0 0 0-2.25-2.25H13.5m-3 0V3h3V1.5m-3 0h3m-3 18.75h3" />
                        </svg>
                        Mobile
                    </button>
                </div>

                <p className="text-lg mb-10"><span className="text-accent font-bold">Feel free to download,</span> since users are able to share their wallpapers with the public if they want</p>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 min-h-[800px]">
                {isLoading ? (
                    // Replace loading text with skeleton grid
                    Array.from({ length: 9 }).map((_, index) => (
                        <div
                            key={index}
                            className="animate-[scaleIn_0.5s_ease-out]"
                            style={{ animationDelay: `${index * 100}ms` }}
                        >
                            <ImageSkeleton deviceType={selectedDevice} />
                        </div>
                    ))
                ) : (
                    images.map((image, index) => (
                        <div
                            key={image.id}
                            className="animate-[scaleIn_0.5s_ease-out]"
                            style={{ animationDelay: `${index * 100}ms` }}
                        >
                            <GalleryImage
                                imageUrl={image.image_url}
                                title={image.title || 'Untitled'}
                                author={image.username || 'Anonymous'}
                                dimensions={`${image.width}x${image.height}`}
                            />
                        </div>
                    ))
                )}
            </div>
            <Pagination />
        </div>
    )
}
